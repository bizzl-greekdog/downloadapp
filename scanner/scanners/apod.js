// Generated by CoffeeScript 1.10.0

/*
 * Copyright (c) 2016 Benjamin Kleiner
 *
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

(function() {
  module.exports.identify = function(url, referer, parameters, config) {
    if (-1 < url.indexOf('apod.nasa.gov/')) {
      return url;
    } else if (-1 < referer.indexOf('apod.nasa.gov/')) {
      return referer;
    } else {
      return false;
    }
  };

  module.exports.run = function(casper, utilities, moreUtilities, parameters, config, url) {
    var checkQueue, downloadItems, downloadQueue;
    checkQueue = [url];
    downloadQueue = [];
    downloadItems = [];
    return casper["do"](function() {
      this.start();
      this.label('ANALYZE');
      this.then(function() {
        url = checkQueue.shift();
        if (!url) {
          if (downloadQueue.length > 1) {
            moreUtilities.notify(this, "Prescan done, " + downloadQueue.length + " pages will be scanned");
          }
          return this.goto('VIEW');
        } else if (-1 < url.indexOf('apod/astropix')) {
          this.open(url);
          return this.then(function() {
            var num;
            num = this.getElementAttribute(this.x('html/body/center[3]/a[text() = \'<\']'), 'href');
            num = parseInt(num.slice(2, -5), 10) + 1;
            downloadQueue.push("http://apod.nasa.gov/apod/ap" + num + ".html");
            return this.goto('ANALYZE');
          });
        } else {
          downloadQueue.push(url);
          return this.goto('ANALYZE');
        }
      });
      this.label('VIEW');
      this.then(function() {
        url = downloadQueue.shift();
        if (!url) {
          return this.goto('END');
        } else {
          this.open(url);
          return this.then(function() {
            var artist, comment, downloadItem, fileUrl, origFn, referer, title;
            referer = this.getCurrentUrl();
            fileUrl = this.getElementAttribute(this.x('/html/body/center[1]/p[2]/a'), 'href');
            fileUrl = "http://apod.nasa.gov/apod/" + fileUrl;
            origFn = fileUrl.replace(/\?.*$/, '').split('/').pop();
            title = this.fetchText(this.x('/html/body/center[2]/b[1]')).trim();
            artist = this.fetchText(this.x('/html/body/center[2]')).replace(/\n/g, ' ').replace(/\s+/g, ' ').split(':', 2)[1].trim();
            comment = moreUtilities.cleanText(this.fetchText(this.x('/html/body/p[1]'))).replace(/^Explanation: /, '').trim().replace(/ *\n/g, ' ').replace(/  /g, "\n");
            downloadItem = {
              url: fileUrl,
              filename: 'apod_' + origFn,
              referer: referer,
              metadata: {
                'Title': title,
                'Artist': artist,
                'Original filename': origFn,
                'Source': referer
              },
              comment: comment
            };
            moreUtilities.exportDownloads(this, [downloadItem]);
            return this.goto('VIEW');
          });
        }
      });
      this.label('END');
      return this.run(function() {
        return this.exit(0);
      });
    });
  };

}).call(this);
