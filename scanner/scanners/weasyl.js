// Generated by CoffeeScript 1.10.0

/*
 * Copyright (c) 2016 Benjamin Kleiner
 *
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  module.exports.identify = function(url, referer, parameters, config) {
    if (url === config.watchlist.key || -1 < url.indexOf('weasyl.com/')) {
      return url;
    } else if (-1 < referer.indexOf('weasyl.com/')) {
      return referer;
    } else {
      return false;
    }
  };

  module.exports.run = function(casper, utilities, moreUtilities, parameters, config, url) {
    var checkQueue, downloadQueue, patternUrl, scraps;
    checkQueue = [url];
    downloadQueue = [];
    patternUrl = null;
    scraps = false;
    return casper["do"](function() {
      this.start(config.watchlist.url);
      this.then(function() {
        return this.page.onResourceRequested = function(requestData, request) {
          if (-1 === requestData['url'].indexOf('weasyl.com/')) {
            return request.abort();
          }
        };
      });
      this.thenBypassIf((function() {
        return '/signin' !== this.getElementAttribute('#hg-login', 'href');
      }), 2);
      this.then(function() {
        this.open('https://www.weasyl.com/signin');
        return this.then(function() {
          return this.fill('#login-box form', {
            'username': parameters.user,
            'password': parameters.password
          }, true);
        });
      });
      this.label('ANALYZE');
      this.then(function() {
        var path, x;
        url = checkQueue.shift();
        if (!url) {
          if (downloadQueue.length > 1000) {
            moreUtilities.alert(this, "Prescan done, " + downloadQueue.length + " pages will be enqueued");
            this.goto('ENQUEUE');
            return;
          } else if (downloadQueue.length > 10) {
            moreUtilities.alert(this, "Prescan done, " + downloadQueue.length + " pages will be scanned");
          } else if (downloadQueue.length > 1) {
            moreUtilities.notify(this, "Prescan done, " + downloadQueue.length + " pages will be scanned");
          }
          return this.goto('VIEW');
        } else if (url === config.watchlist.key) {
          this.open(config.watchlist.url);
          return this.goto('WATCHLIST');
        } else {
          path = url.replace(/^https?:\/\//, '').split('/');
          if ([
            (function() {
              var i, len, ref, results;
              ref = ['submission', 'character'];
              results = [];
              for (i = 0, len = ref.length; i < len; i++) {
                x = ref[i];
                if (indexOf.call(path, x) >= 0) {
                  results.push(x);
                }
              }
              return results;
            })()
          ].length) {
            downloadQueue.push(url);
          } else if ([
            (function() {
              var i, len, ref, results;
              ref = ['submissions', 'collections', 'favorites', 'characters'];
              results = [];
              for (i = 0, len = ref.length; i < len; i++) {
                x = ref[i];
                if (indexOf.call(path, x) >= 0) {
                  results.push(x);
                }
              }
              return results;
            })()
          ].length) {
            this.open(url);
            this.goto('GALLERY');
            return;
          } else if ([
            (function() {
              var i, len, ref, results;
              ref = ['profile', 'user'];
              results = [];
              for (i = 0, len = ref.length; i < len; i++) {
                x = ref[i];
                if (indexOf.call(path, x) >= 0) {
                  results.push(x);
                }
              }
              return results;
            })()
          ].length) {
            checkQueue.push('https://www.weasyl.com/submissions/' + path[4]);
            checkQueue.push('https://www.weasyl.com/characters/' + path[4]);
          } else if ('~' === path[3].charAt(0)) {
            checkQueue.push('https://www.weasyl.com/submissions/' + path[3].substring(1));
            checkQueue.push('https://www.weasyl.com/characters/' + path[3].substring(1));
          } else {
            moreUtilities.alert(this, url + " is a weird url for weasyl");
          }
          return this.goto('ANALYZE');
        }
      });
      this.label('WATCHLIST');
      this.then(function() {
        var i, len, view, views;
        views = this.getElementsAttribute('.thumbnail-grid .item .thumb a.thumb-bounds', 'href');
        this.log((this.getCurrentUrl()) + " has " + views.length, 'info');
        this.log("Total: " + downloadQueue.length, 'info');
        if (views.length) {
          for (i = 0, len = views.length; i < len; i++) {
            view = views[i];
            view = "https://www.weasyl.com" + view;
            if (indexOf.call(downloadQueue, view) < 0) {
              downloadQueue.push(view);
            } else {
              moreUtilities.notify(this, view + " appeared more than once in prescan");
            }
          }
        }
        if (this.exists('a.button.notifs-next')) {
          this.click('a.button.notifs-next');
          return this.goto('WATCHLIST');
        } else {
          return this.goto('ANALYZE');
        }
      });
      this.label('GALLERY');
      this.then(function() {
        var i, len, view, views;
        views = this.getElementsAttribute('.thumbnail-grid .item .thumb a.thumb-bounds', 'href');
        this.log((this.getCurrentUrl()) + " has " + views.length, 'info');
        this.log("Total: " + downloadQueue.length, 'info');
        if (views.length) {
          for (i = 0, len = views.length; i < len; i++) {
            view = views[i];
            view = "https://www.weasyl.com" + view;
            if (indexOf.call(downloadQueue, view) < 0) {
              downloadQueue.push(view);
            } else {
              moreUtilities.notify(this, view + " appeared more than once in prescan");
            }
          }
        }
        if (this.exists('.sectioned-main a.button:not([href*="backid="])')) {
          this.click('.sectioned-main a.button:not([href*="backid="])');
          return this.goto('GALLERY');
        } else {
          return this.goto('ANALYZE');
        }
      });
      this.label('VIEW');
      this.then(function() {
        url = downloadQueue.shift();
        if (!url) {
          return this.goto('END');
        } else {
          this.open(url);
          return this.then(function() {
            var artist, comment, downloadItem, fileExt, fileName, fileNr, fileTitle, fileUrl, fragment, i, len, ref, title;
            url = this.getCurrentUrl();
            fileUrl = this.getElementAttribute('#detail-actions a[href*=submission], #detail-actions a[href*=submit]', 'href');
            if (fileUrl === null) {
              moreUtilities.alert(this, url + " might be a video");
            } else {
              comment = moreUtilities.cleanText(this.getHTML('#detail-description .formatted-content:not(.markdown-preview)'));
              title = this.fetchText('#detail-bar-title').trim();
              artist = this.fetchText('#db-user .username').trim();
              fileExt = fileUrl.split('.').pop().replace(/\?.*$/, '');
              fileNr = false;
              ref = url.split('/');
              for (i = 0, len = ref.length; i < len; i++) {
                fragment = ref[i];
                this.echo(fragment);
                if (fileNr) {
                  fileNr = fragment;
                  break;
                } else if (fragment === 'submissions') {
                  fileNr = true;
                }
              }
              if (!fileNr) {
                fileNr = url.split('/')[4];
              }
              fileTitle = title.toLowerCase().replace(/['"\n]/g, '').replace(/[ ]/g, '_');
              fileName = "weasyl_" + fileNr + "_" + fileTitle + "_by_" + artist + "." + fileExt;
            }
            downloadItem = {
              url: fileUrl,
              filename: fileName,
              referer: url,
              comment: comment,
              metadata: {
                Artist: artist,
                Title: title,
                Source: url,
                'Original Filename': fileUrl.split('/').pop()
              }
            };
            moreUtilities.exportDownloads(this, [downloadItem]);
            return this.goto('VIEW');
          });
        }
      });
      this.label('ENQUEUE');
      this.then(function() {
        moreUtilities.enqueueUrls(this, downloadQueue);
        return this.goto('END');
      });
      this.label('END');
      return this.run(function() {
        return this.exit(0);
      });
    });
  };

}).call(this);
