// Generated by CoffeeScript 1.10.0

/*
 * Copyright (c) 2016 Benjamin Kleiner
 *
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  module.exports.identify = function(url, referer) {
    if (url === 'deviantart:watchlist' || -1 < url.indexOf('deviantart.com/')) {
      return url;
    } else if (-1 < referer.indexOf('deviantart.com/')) {
      return referer;
    } else {
      return false;
    }
  };

  module.exports.run = function(casper, utilities, moreUtilities, parameters, url) {
    var checkQueue, downloadQueue, patternUrl, scraps;
    checkQueue = [url];
    downloadQueue = [];
    patternUrl = null;
    scraps = false;
    return casper["do"](function() {
      this.start('http://www.deviantart.com/notifications/');
      this.then(function() {
        return this.page.onResourceRequested = function(requestData, request) {
          if (-1 === requestData['url'].indexOf('deviantart.com/')) {
            return request.abort();
          }
        };
      });
      this.thenBypassIf((function() {
        return indexOf.call(this.page.url, 'users/login') >= 0;
      }), 1);
      this.then(function() {
        return this.fill('form#login', {
          'username': parameters.user,
          'password': parameters.password
        }, true);
      });
      this.label('ANALYZE');
      this.then(function() {
        var path, username;
        url = checkQueue.shift();
        patternUrl = null;
        if (!url) {
          if (downloadQueue.length > 1000) {
            moreUtilities.alert(this, "Prescan done, " + downloadQueue.length + " pages will be enqueued");
            this.goto('ENQUEUE');
            return;
          } else if (downloadQueue.length > 10) {
            moreUtilities.alert(this, "Prescan done, " + downloadQueue.length + " pages will be scanned");
          } else if (downloadQueue.length > 1) {
            moreUtilities.notify(this, "Prescan done, " + downloadQueue.length + " pages will be scanned");
          }
          return this.goto('VIEW');
        } else if (url === 'deviantart:watchlist') {
          patternUrl = new moreUtilities.PatternUrl('http://my.deviantart.com/global/difi/?c[]="MessageCenter","get_views",[284144,"oq:devwatch:%i:24:b:tg=deviations"]&t=json', 0, 24);
          this.open(patternUrl.nextPage());
          return this.then(function() {
            return this.goto('WATCHLIST');
          });
        } else {
          path = url.split('/');
          if (path[3] === 'art') {
            downloadQueue.push(url);
            return this.goto('ANALYZE');
          } else {
            username = path[2].split('.')[0];
            scraps = false;
            patternUrl = new moreUtilities.PatternUrl('http://' + username + '.deviantart.com/global/difi/?c[]=Resources;htmlFromQuery;gallery%3A' + username + '%20sort%3Atime,%i,24,thumb150,artist%3A0&t=json', 0, 24);
            this.open(patternUrl.nextPage());
            return this.then(function() {
              return this.goto('GALLERY');
            });
          }
        }
      });
      this.label('GALLERY');
      this.then(function() {
        var json, username;
        username = this.getCurrentUrl().split('/')[2].split('.')[0];
        json = this.getJSON();
        if (!json || json.DiFi.response.calls[0].response.content.resources.length === 0) {
          if (scraps) {
            return this.goto('ANALYZE');
          } else {
            patternUrl = new moreUtilities.PatternUrl('http://' + username + '.deviantart.com/global/difi/?c[]=Resources;htmlFromQuery;gallery%3A' + username + '%20sort%3Atime%20in%3Ascraps,%i,24,thumb150,artist%3A0&t=json', 0, 24);
            scraps = true;
            this.open(patternUrl.nextPage());
            return this.then(function() {
              return this.goto('GALLERY');
            });
          }
        } else {
          json.DiFi.response.calls[0].response.content.resources.forEach(function(item, key, resources) {
            if (!item[2]) {
              return;
            }
            return downloadQueue.push(item[2].match(/http:\/\/[^"]*?\.deviantart\.com\/art\/[^"]+/)[0]);
          });
          this.open(patternUrl.nextPage());
          return this.then(function() {
            return this.goto('GALLERY');
          });
        }
      });
      this.label('WATCHLIST');
      this.then(function() {
        var json;
        json = this.getJSON();
        if (!json || json.DiFi.response.calls[0].response.content[0].result.hits.length === 0) {
          return this.goto('ANALYZE');
        } else {
          json.DiFi.response.calls[0].response.content[0].result.hits.forEach(function(hit, key, hits) {
            return downloadQueue.push(hit.url);
          });
          this.open(patternUrl.nextPage());
          return this.then(function() {
            return this.goto('WATCHLIST');
          });
        }
      });
      this.label('VIEW');
      this.then(function() {
        url = downloadQueue.shift();
        if (!url) {
          return this.goto('END');
        } else {
          this.open(url);
          return this.then(function() {
            var artist, comment, e, error, fileUrl, title;
            url = this.getCurrentUrl();
            fileUrl = this.getElementAttribute('.dev-page-download', 'href');
            if (fileUrl === null) {
              fileUrl = this.evaluate(function() {
                var result;
                result = null;
                document.querySelectorAll('.dev-page-button:not(.pdw_button_download)').forEach(function(button) {
                  if (null === result) {
                    return;
                  }
                  if (-1 < button.textContent.search('Download')) {
                    return result = button.href;
                  }
                });
                return result;
              });
            }
            if (fileUrl === null) {
              fileUrl = this.tryAnyOfThese([
                {
                  selector: 'img.dev-content-full',
                  key: 'src'
                }, {
                  selector: 'img.dev-content-normal',
                  key: 'src'
                }
              ], '');
            }
            title = this.evaluate(function() {
              return document.querySelector('.dev-title-container > h1 > a').textContent.trim();
            });
            artist = this.evaluate(function() {
              return document.querySelector('a.username, h3.more-from-artist-title > a, div.dev-title-container > h1 > a.username').textContent.trim();
            });
            try {
              comment = moreUtilities.cleanText(this.getHTML('.text-ctrl'));
            } catch (error) {
              e = error;
              comment = '';
            }
            this.downloadItem = {
              url: null,
              filename: null,
              referer: url,
              comment: comment,
              metadata: {
                Artist: artist,
                Title: title,
                Source: url,
                'Original Filename': null
              }
            };
            this.open(fileUrl, {
              method: 'head',
              headers: {
                Referer: url
              }
            });
            return this.then(function() {
              var artistRegex, fileName, originalFilename;
              fileUrl = this.getCurrentUrl();
              originalFilename = fileUrl.split('/').pop();
              fileName = 'deviantart_' + originalFilename;
              artistRegex = new RegExp('_by_' + this.downloadItem.metadata.Artist.replace(/[-_ ]/g, '[-_]') + '\.' + fileName.split('.').pop() + '$', 'i');
              if (!fileName.match(artistRegex)) {
                fileName = fileName.replace(new RegExp('\.' + fileName.split('.').pop() + '$', 'i'), '_by_' + this.downloadItem.metadata.Artist + '.' + fileName.split('.').pop());
              }
              this.downloadItem.url = fileUrl;
              this.downloadItem.filename = fileName;
              this.downloadItem.metadata['Original Filename'] = originalFilename;
              moreUtilities.exportDownloads(this, [this.downloadItem]);
              return this.goto('VIEW');
            });
          });
        }
      });
      this.label('ENQUEUE');
      this.then(function() {
        moreUtilities.enqueueUrls(this, downloadQueue);
        return this.goto('END');
      });
      this.label('END');
      return this.run(function() {
        return this.exit(0);
      });
    });
  };

}).call(this);
