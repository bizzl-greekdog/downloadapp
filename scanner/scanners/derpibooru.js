// Generated by CoffeeScript 1.10.0

/*
 * Copyright (c) 2016 Benjamin Kleiner
 *
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

(function() {
  module.exports.identify = function(url, referer, parameters, config) {
    var domain;
    domain = url.replace(/^[a-z]+:\/\//, '').split('/')[0];
    if (domain === 'derpibooru.org' || domain === 'derpiboo.ru') {
      return url;
    } else {
      domain = referer.replace(/^[a-z]+:\/\//, '').split('/')[0];
      if (domain === 'derpibooru.org' || domain === 'derpiboo.ru') {
        return referer;
      } else {
        return false;
      }
    }
  };

  module.exports.run = function(casper, utilities, moreUtilities, parameters, config, url) {
    return casper["do"](function() {
      this.start(url);
      this.then(function() {
        var artist, comment, download, fileUrl, originalFilename, protocol, source;
        fileUrl = this.getElementAttribute('a[href*="/download/"][href*="__"]', 'href');
        if (0 === fileUrl.indexOf('//')) {
          protocol = this.getCurrentUrl().split(':')[0];
          fileUrl = protocol + ":" + fileUrl;
        }
        originalFilename = fileUrl.replace(/\?.*$/, '').split('/').pop();
        source = this.getElementAttribute('.source_url > a', 'href');
        if (source) {
          moreUtilities.enqueueUrls(this, [source]);
        } else {
          source = '';
        }
        artist = this.evaluate(function() {
          var artists;
          artists = [];
          Array.prototype.slice.call(document.querySelectorAll('.tag-ns-artist')).forEach(function(tag) {
            return artists.push(tag.getAttribute('data-tag-name-in-namespace'));
          });
          return artists.join(', ');
        });
        if (this.exists('.image-description')) {
          comment = this.getHTML('.image-description');
          comment = moreUtilities.cleanText(comment.replace(/^<h3.*?<\/h3>/, ''));
        } else {
          comment = '';
        }
        download = {
          url: fileUrl,
          filename: 'derpibooru_' + originalFilename,
          referer: this.getCurrentUrl(),
          metadata: {
            Artist: artist,
            'Original filename': originalFilename,
            'Found at': this.getCurrentUrl(),
            Source: source
          },
          comment: comment
        };
        return moreUtilities.exportDownloads(this, [download]);
      });
      return this.run(function() {
        return this.exit(0);
      });
    });
  };

}).call(this);
